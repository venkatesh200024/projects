import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier
from xgboost import XGBClassifier
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score


data = pd.read_csv("C:\\Users\\venka\\OneDrive\\Documents\\Downloads//creditcard.csv")
data.drop('Time', axis = 1, inplace = True)
X = data.drop('Class', axis = 1).values
Y = data['Class'].values
X_train, X_test, Y_train, Y_test=train_test_split(X, Y, test_size=0.2, random_state=42)


tree_model = DecisionTreeClassifier(criterion = 'entropy')
tree_model.fit(X_train, Y_train)
tree_yhat = tree_model.predict(X_test)
accuracy_tree = (accuracy_score(Y_test, tree_yhat)) * 100
print("The accuracy of Decision Tree algorithm is " + str(accuracy_tree))
print("Model Precision:", round(precision_score(Y_test, tree_yhat),4))
print("Model Recall:", round(recall_score(Y_test, tree_yhat),4))
print("F1 Score:", round(f1_score(Y_test, tree_yhat),4))
tree_matrix = confusion_matrix(Y_test, tree_yhat, labels = [0, 1])
print(tree_matrix)


knn = KNeighborsClassifier(n_neighbors = 5)
knn.fit(X_train, Y_train)
knn_yhat = knn.predict(X_test)
accuracy_knn = (accuracy_score(Y_test, knn_yhat)) * 100
print("The accuracy of KNN algorithm is " + str(accuracy_knn))
print("Model Precision:", round(precision_score(Y_test, knn_yhat),4))
print("Model Recall:", round(recall_score(Y_test, knn_yhat),4))
print("F1 Score:", round(f1_score(Y_test, knn_yhat),4))
knn_matrix = confusion_matrix(Y_test, knn_yhat, labels = [0, 1])
print(knn_matrix)

lr = LogisticRegression()
lr.fit(X_train, Y_train)
lr_yhat = lr.predict(X_test)
accuracy_lr = (accuracy_score(Y_test, lr_yhat)) * 100
print("The accuracy of Logistic Regression algorithm is " + str(accuracy_lr))
print("Model Precision:", round(precision_score(Y_test, lr_yhat),4))
print("Model Recall:", round(recall_score(Y_test, lr_yhat),4))
print("F1 Score:", round(f1_score(Y_test, lr_yhat),4))
lr_matrix = confusion_matrix(Y_test, lr_yhat, labels = [0, 1])
print(lr_matrix)

svm = SVC()
svm.fit(X_train, Y_train)
svm_yhat = svm.predict(X_test)
accuracy_svm= (accuracy_score(Y_test, svm_yhat)) * 100
print("The accuracy of SVM algorithm is" + str(accuracy_svm))
print("Model Precision:", round(precision_score(Y_test, svm_yhat),4))
print("Model Recall:", round(recall_score(Y_test, svm_yhat),4))
print("F1 Score:", round(f1_score(Y_test, svm_yhat),4))
svm_matrix = confusion_matrix(Y_test, svm_yhat, labels = [0, 1])
print(svm_matrix)










